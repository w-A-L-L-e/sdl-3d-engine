/*=============================================================================
author        : Walter Schreppers
filename      : bmtext.cpp
created       : 2/5/2022 at 23:42:16
modified      : 
version       : 
copyright     : Walter Schreppers
bugreport(log): 
=============================================================================*/

#include "bmtext.h"
#include <iostream>
#include <numeric>

#define PI 3.14159265358979323846

/*-----------------------------------------------------------------------------
name        : init
description : initialize private locals
parameters  : 
return      : void
exceptions  : 
algorithm   : trivial
-----------------------------------------------------------------------------*/
void BMText::init(){
  initFont();

  for(int i=0;i<64;i++){
    text_sintab[i] = std::sin(i*PI/32);
  }
}


/*-----------------------------------------------------------------------------
name        : BMText
description : constructor
parameters  : 
return      : 
exceptions  : 
algorithm   : trivial
-----------------------------------------------------------------------------*/
BMText::BMText(Screen& scr){
  screen = &scr;
  init();
}


/*-----------------------------------------------------------------------------
name        : ~BMText
description : destructor
parameters  : 
return      : 
exceptions  : 
algorithm   : trivial
-----------------------------------------------------------------------------*/
BMText::~BMText(){

}


void BMText::initFont(){
  unsigned char font_data[1280] = {
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x7d, 0x79, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x12, 0x29, 0x7f, 0x29, 0x16, 0x11, 0x2a, 0x15, 0xa, 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x68, 0x70, 0x0, 0x0, 0x1e, 0x21, 0x40, 0x0, 0x0, 0x40, 0x21, 0x1e, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x3e, 0x8, 0x8, 0x0, 0x0, 0x6, 0x7, 0x0, 
    0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x2, 0x7, 0x2, 0x0, 0x0, 0x3, 0xc, 0x30, 0x40, 
    0x3c, 0x46, 0x4a, 0x52, 0x3c, 0x0, 0x22, 0x7e, 0x2, 0x0, 0x22, 0x46, 0x4a, 0x52, 0x22, 
    0x24, 0x42, 0x42, 0x52, 0x2c, 0x4, 0xc, 0x14, 0x24, 0x7e, 0x74, 0x52, 0x52, 0x52, 0x4c, 
    0x3c, 0x52, 0x52, 0x52, 0x4c, 0x40, 0x40, 0x48, 0x4e, 0x70, 0x2c, 0x52, 0x52, 0x52, 0x2c, 
    0x32, 0x4a, 0x4a, 0x4a, 0x3c, 0x0, 0x0, 0x66, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x8, 0x14, 0x22, 0x41, 0x0, 0x14, 0x14, 0x14, 0x14, 0x14, 0x0, 0x41, 0x22, 0x14, 0x8, 
    0x30, 0x40, 0x46, 0x48, 0x30, 0x3f, 0x40, 0x4e, 0x4e, 0x3c, 0x3e, 0x44, 0x44, 0x44, 0x3e, 
    0x7e, 0x52, 0x52, 0x52, 0x2c, 0x3c, 0x42, 0x42, 0x42, 0x24, 0x7e, 0x42, 0x42, 0x42, 0x3c, 
    0x7e, 0x52, 0x52, 0x42, 0x42, 0x7e, 0x50, 0x50, 0x40, 0x40, 0x3c, 0x42, 0x42, 0x4a, 0x2c, 
    0x7e, 0x4, 0x4, 0x4, 0x7e, 0x0, 0x42, 0x7e, 0x42, 0x0, 0x4, 0x2, 0x42, 0x7c, 0x40, 
    0x7e, 0x8, 0x18, 0x24, 0x42, 0x7e, 0x2, 0x2, 0x2, 0x0, 0x7e, 0x20, 0x10, 0x20, 0x7e, 
    0x7e, 0x20, 0x10, 0x8, 0x7e, 0x3c, 0x42, 0x42, 0x42, 0x3c, 0x7e, 0x48, 0x48, 0x48, 0x30, 
    0x3c, 0x42, 0x46, 0x42, 0x3d, 0x7e, 0x48, 0x48, 0x54, 0x62, 0x24, 0x52, 0x52, 0x52, 0x4c, 
    0x40, 0x40, 0x7e, 0x40, 0x40, 0x7c, 0x2, 0x2, 0x2, 0x7c, 0x60, 0x18, 0x6, 0x18, 0x60, 
    0x7c, 0x2, 0xc, 0x2, 0x7c, 0x42, 0x24, 0x18, 0x24, 0x42, 0x72, 0xa, 0xa, 0xa, 0x7c, 
    0x42, 0x46, 0x4a, 0x52, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x30, 0xc, 0x3, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x24, 0x2a, 0x2a, 0x1c, 0x2, 0x0, 0x7c, 0xa, 0x12, 0xc, 
    0x0, 0x1c, 0x22, 0x22, 0x14, 0x0, 0xc, 0x12, 0xa, 0x7c, 0x0, 0x1c, 0x22, 0x2a, 0x12, 
    0x0, 0x1e, 0x24, 0x10, 0x0, 0x1, 0x18, 0x24, 0x24, 0x1f, 0x0, 0x7e, 0x8, 0x10, 0xe, 
    0x0, 0x0, 0x5e, 0x0, 0x0, 0x0, 0x6, 0x1, 0x5e, 0x0, 0x0, 0x7e, 0x4, 0xc, 0x12, 
    0x0, 0x0, 0x7e, 0x0, 0x0, 0xe, 0x10, 0x1c, 0x10, 0xe, 0x0, 0xe, 0x10, 0x10, 0xe, 
    0x0, 0xc, 0x12, 0x12, 0xc, 0x0, 0x3e, 0x28, 0x28, 0x10, 0x0, 0x10, 0x28, 0x28, 0x3e, 
    0x0, 0x1e, 0x8, 0x10, 0x8, 0x4, 0x12, 0x2a, 0x2a, 0x2c, 0x0, 0x3c, 0x12, 0x4, 0x0, 
    0x0, 0x1c, 0x2, 0x2, 0x1c, 0x0, 0x1c, 0x2, 0x1c, 0x0, 0x1c, 0x2, 0xe, 0x2, 0x1c, 
    0x0, 0x16, 0x8, 0x16, 0x0, 0x0, 0x18, 0x4, 0x1f, 0x0, 0x0, 0x12, 0x16, 0x1a, 0x12, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0 
  };


  // this trick to avoid a copy fails however:
  // unsigned char (*font_matrix)[256][5];
  // font_matrix =(unsigned char (*)[256][5]) &font_data;

  int d=0;
  for(int i=0;i<256;i++){
    for(int j=0;j<5;j++){
      // (*font_matrix)[i][j] = font_data[d++];
      font_matrix[i][j] = font_data[d++];
    }
  }
}


void BMText::print(Uint32 x, Uint32 y, const std::string& text){
  // for( std::string::const_iterator p; p!=text.end(); ++p){
  for(int t=0; t<text.size(); t++){
    unsigned int cp = (unsigned int)text[t];
    if(cp>255) cp=255;

    //plot char at ascii pos cp
    for(int ypos=0;ypos<8;ypos++){
      for(int j=0;j<5;j++){
        unsigned char pixel_line = font_matrix[cp][j]; 
        if( pixel_line & (1 << (7 - ypos) )){
          screen->pixel(x+j,y+ypos);
        }
      } 
    }
    x+=6;
  }
}


// c:=round(2*cos((x+i+offset)/8));

void BMText::print_wavy(Uint32 x, Uint32 y, const std::string& text){
  static int offset=0;
  offset=(offset+2) % 64;

  for(int t=0; t<text.size(); t++){
    unsigned int cp = (unsigned int)text[t];
    if(cp>255) cp=255;

    //plot char at ascii pos cp
    for(int ypos=0;ypos<8;ypos++){
      for(int j=0;j<5;j++){
        unsigned char pixel_line = font_matrix[cp][j]; 
        int spos = ((x+j)/2 + offset) % 64;
        int yoff = 5 * text_sintab[spos];

        if( pixel_line & (1 << (7 - ypos) )){
          screen->pixel(x+j,y+ypos+yoff);
        }
      } 
    }
    x+=6;
  }
}


void BMText::print_flashy(Uint32 x, Uint32 y, const std::string& text){
  static int offset=0;
  offset=(offset+1) % 256;
  //std::cout<<"TODO: print_flashy("<<x<<","<<y<<" : " << offset <<") t="<<text<<std::endl;
}


/*
TODO:

procedure Inittables;
var i:byte;
begin
 for i:=0 to 255 do begin
  SINUS[i]:=( Sin((Pi/128)*i));
  COSIN[i]:=( Cos((Pi/128)*i));
  SINT[i]:= 64+round(8*sin(2*pi*i/255));
  COST[i]:= round( Cos((Pi/128)*i)*256);
  end;
end;

procedure printflashy(x,y:integer;s:string);
var
   i,j,k,c:integer;
begin
     for k:=1 to length(s) do
     begin
          for i:=0 to 4 do
          begin
            for j:=0 to 7 do
            if font[ord(s[k]),i,j]<>0 then
                page2^[y+j,x+i]:=sint[((offset-(i*j))*2)mod 256];
          end;
          x:=x+6;
     end;
end;

procedure writeflashy(x,y:integer;s:string);
var
   i,j,k,c:integer;
begin
     for k:=1 to length(s) do
     begin
          for i:=0 to 4 do
          begin
            for j:=0 to 7 do
            if font[ord(s[k]),i,j]<>0 then
                page2^[y+j,x+i]:=sinus[((offset-(i*j))*2)mod 256];
          end;
          x:=x+6;
     end;
end;



*/

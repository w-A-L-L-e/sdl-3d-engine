program Zclipping;
uses crt,fastvga,fastkeys;

const
  maxtriangle=450;
  maxpoints=450;
  maxedge=620;
 (*mijn datastructuur voor 3d stuff :)*)
 TYPE

 matrix=Array [0..3,0..3] OF real;
 vector=array [0..3] OF longint;
 normaal=array [0..3] of longint;

 Point = RECORD
          p   : vector;
          rotp: vector;
         end;

 Triangle = record
             p1,p2,p3  :integer;
             u1,v1,
             u2,v2,
             u3,v3     :integer;
             normaal   :normaal;
             rnormaal  :normaal;
             middenz   :longint;
             color     :byte;
            end;

 Edge = record
         pa,pb    :integer;
         t1,t2    :integer;
         middenz  :longint;
         color    :byte;
         internal :boolean;
        end;

 tmap   = record
        x1,x2,u1,v1,u2,v2:integer;
        end;
 xedges    = array [0..199] of tmap;
 trilist= array [0..maxtriangle] of triangle;
 pointlist= array [0..maxpoints] of point;
 edgelist= array [0..maxedge] of edge;

var

  COSIN       : ARRAY [0..255] OF real;
  SINUS       : ARRAY [0..255] OF real;
  COST        : ARRAY [0..255] OF INTEGER;
  SINT        : ARRAY [0..255] OF INTEGER;
  plast       : integer;
  tlast       : integer;
  elast       : integer;
  plist       : pointlist;
  tlist       : trilist;
  elist       : edgelist;
  CenterX     ,
  CenterY     ,
  SizeX       ,
  SizeY       : integer;
  page3       : vscreenptr;


{-----------------------------FONT------------------------------------------}
CONST
font : ARRAY [0..255,0..4,0..7] OF BYTE =
(((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(15,15,15,15,15,0,15,15),
(15,15,15,15,0,0,15,15),
(15,15,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,15,0,0,15,0,0),
(0,15,0,15,0,0,15,0),
(15,15,15,15,15,15,15,15),
(0,15,0,15,0,0,15,0),
(0,0,15,0,15,15,0,0)
),
((0,0,15,0,0,0,15,0),
(0,15,0,15,0,15,0,0),
(0,0,15,0,15,0,15,0),
(0,0,0,15,0,15,0,15),
(0,0,15,0,0,0,15,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,15,0,15,0,0,0,0),
(15,15,15,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,15,0,0),
(0,15,0,0,0,0,15,0),
(15,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,15),
(0,15,0,0,0,0,15,0),
(0,0,15,15,15,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0),
(0,15,15,15,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,15,15,0,15),
(0,0,0,0,15,15,15,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,15,15,15,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,15),
(0,0,0,0,0,15,15,0),
(0,0,0,15,15,0,0,0),
(0,15,15,0,0,0,0,0),
(15,0,0,0,0,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,15,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,15,0,0,0,15,0,0),
(15,15,15,15,15,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,15,0,0,0,15,0,0),
(15,0,0,0,15,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,0,0,0,15,0,0)
),
((0,15,0,0,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((0,0,0,0,15,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,15,0,15,0,0,0),
(0,15,0,0,15,0,0,0),
(15,15,15,15,15,15,0,0)
),
((15,15,15,0,15,0,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,0,15,15,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,0,15,15,0,0,0)
),
((15,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,0),
(15,0,0,15,0,0,0,0),
(15,0,0,15,15,15,0,0),
(15,15,15,0,0,0,0,0)
),
((0,15,0,15,15,0,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((0,15,15,0,0,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,0,15,0,15,0,0),
(0,15,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,15,0,0,15,15,0,0),
(15,15,0,0,15,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,15,0,0,0,0),
(0,0,15,0,15,0,0,0),
(0,15,0,0,0,15,0,0),
(15,0,0,0,0,0,15,0),
(0,0,0,0,0,0,0,0)
),
((0,0,15,0,15,0,0,0),
(0,0,15,0,15,0,0,0),
(0,0,15,0,15,0,0,0),
(0,0,15,0,15,0,0,0),
(0,0,15,0,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(15,0,0,0,0,0,15,0),
(0,15,0,0,0,15,0,0),
(0,0,15,0,15,0,0,0),
(0,0,0,15,0,0,0,0)
),
((0,15,15,0,0,0,0,0),
(15,0,0,0,0,0,0,0),
(15,0,0,0,15,15,0,15),
(15,0,0,15,0,0,0,0),
(0,15,15,0,0,0,0,0)
),
((0,15,15,15,15,15,15,0),
(15,0,0,0,0,0,0,15),
(15,0,0,15,15,15,0,15),
(15,0,0,15,15,15,0,15),
(0,15,15,15,15,0,0,15)
),
((0,15,15,15,15,15,0,0),
(15,0,0,0,15,0,0,0),
(15,0,0,0,15,0,0,0),
(15,0,0,0,15,0,0,0),
(0,15,15,15,15,15,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(0,15,0,0,15,0,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(0,15,15,15,15,0,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,15,0,0,0,0,0),
(15,0,15,0,0,0,0,0),
(15,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,15,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((15,15,15,15,15,15,0,0),
(0,0,0,0,15,0,0,0),
(0,0,0,0,15,0,0,0),
(0,0,0,0,15,0,0,0),
(15,15,15,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(15,0,0,0,0,15,0,0),
(15,15,15,15,15,15,0,0),
(15,0,0,0,0,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,15,0,0,0),
(0,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,15,15,15,15,0,0,0),
(15,0,0,0,0,0,0,0)
),
((15,15,15,15,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,15,15,0,0,0,0),
(0,15,0,0,15,0,0,0),
(15,0,0,0,0,15,0,0)
),
((15,15,15,15,15,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,0,0,0)
),
((15,15,15,15,15,15,0,0),
(0,15,0,0,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,15,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0)
),
((15,15,15,15,15,15,0,0),
(0,15,0,0,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,0,0,0,0),
(15,15,15,15,15,15,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(0,15,15,15,15,0,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,0,15,0,0,0,0),
(15,0,0,15,0,0,0,0),
(15,0,0,15,0,0,0,0),
(0,15,15,0,0,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,15,15,0,0),
(15,0,0,0,0,15,0,0),
(0,15,15,15,15,0,15,0)
),
((15,15,15,15,15,15,0,0),
(15,0,0,15,0,0,0,0),
(15,0,0,15,0,0,0,0),
(15,0,15,0,15,0,0,0),
(15,15,0,0,0,15,0,0)
),
((0,15,0,0,15,0,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,0,15,15,0,0,0)
),
((15,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0),
(15,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,0)
),
((15,15,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(15,15,15,15,15,0,0,0)
),
((15,15,0,0,0,0,0,0),
(0,0,15,15,0,0,0,0),
(0,0,0,0,15,15,0,0),
(0,0,15,15,0,0,0,0),
(15,15,0,0,0,0,0,0)
),
((15,15,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(15,15,15,15,15,0,0,0)
),
((15,0,0,0,0,15,0,0),
(0,15,0,0,15,0,0,0),
(0,0,15,15,0,0,0,0),
(0,15,0,0,15,0,0,0),
(15,0,0,0,0,15,0,0)
),
((15,15,15,0,0,15,0,0),
(0,0,0,15,0,15,0,0),
(0,0,0,15,0,15,0,0),
(0,0,0,15,0,15,0,0),
(15,15,15,15,15,0,0,0)
),
((15,0,0,0,0,15,0,0),
(15,0,0,0,15,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,15,0,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((15,0,0,0,0,0,0,0),
(0,15,15,0,0,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,0,0,0,15,15,0),
(0,0,0,0,0,0,0,15)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,15)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,15,0,0,15,0,0,0),
(0,15,0,15,0,15,0,0),
(0,15,0,15,0,15,0,0),
(0,0,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(15,15,15,15,15,0,0,0),
(0,0,0,15,0,15,0,0),
(0,0,15,0,0,15,0,0),
(0,0,0,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,15,0,0,0,15,0,0),
(0,15,0,0,0,15,0,0),
(0,0,15,0,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,15,0,0,15,0,0),
(0,0,0,15,0,15,0,0),
(15,15,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,15,0,0,0,15,0,0),
(0,15,0,15,0,15,0,0),
(0,0,15,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,15,0,0),
(0,15,0,0,15,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,15,0),
(0,0,15,15,0,0,0,15),
(0,15,0,0,15,0,0,15),
(0,15,0,0,15,0,0,15),
(0,0,15,15,15,15,15,0)
),
((0,0,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,0,15,15,15,15,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,15,15,0,0),
(0,0,0,0,0,0,15,0),
(15,0,15,15,15,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0),
(0,0,0,0,15,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,15,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,15,15,15,0,0),
(0,0,15,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,15,15,15,0,0),
(0,0,15,0,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,15,0,0,15,0,0),
(0,0,15,0,0,15,0,0),
(0,0,0,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,15,15,15,15,15,0,0),
(0,15,0,15,0,0,0,0),
(0,15,0,15,0,0,0,0),
(0,0,15,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,15,0,15,0,0,0,0),
(0,15,0,15,0,0,0,0),
(0,15,15,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,0,0,0,0)
),
((0,0,0,0,15,0,0,0),
(0,0,15,0,0,15,0,0),
(0,15,0,15,0,15,0,0),
(0,15,0,15,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,15,15,15,15,0,0,0),
(0,0,15,0,0,15,0,0),
(0,0,0,0,15,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,15,15,15,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,15,15,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,0,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,15,0,15,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,0,0,0,15),
(0,0,0,0,15,0,0,15),
(0,0,15,15,15,15,15,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,0,0,15,0,0),
(0,0,15,0,15,15,0,0),
(0,0,15,15,0,15,0,0),
(0,0,15,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,15,15,15,15,15,15,15),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
)
);

{------------------------------font end------------------------------------}



var offset:integer;


procedure Inittables;
var i:byte;
begin
 for i:=0 to 255 do begin
  SINUS[i]:=( Sin((Pi/128)*i));
  COSIN[i]:=( Cos((Pi/128)*i));
  SINT[i]:= 64+round(8*sin(2*pi*i/255));
  COST[i]:= round( Cos((Pi/128)*i)*256);
  end;
end;

procedure print(x,y:integer;s:string;color:byte);
var
   i,j,k:integer;
begin
     for k:=1 to length(s) do
     begin
          for i:=0 to 4 do
          for j:=0 to 7 do
          if font[ord(s[k]),i,j]<>0 then
              page2^[y+j,x+i]:=color;
          x:=x+6;
     end;
end;

procedure printsin(x,y:integer;s:string;color:byte);
var
   i,j,k,c:integer;
begin
     for k:=1 to length(s) do
     begin
          for i:=0 to 4 do
          begin
               c:=round(2*cos((x+i+offset)/8));
            for j:=0 to 7 do
            if font[ord(s[k]),i,j]<>0 then
                page2^[y+j+c,x+i]:=color;
          end;
          x:=x+6;
     end;
end;


procedure printflashy(x,y:integer;s:string);
var
   i,j,k,c:integer;
begin
     for k:=1 to length(s) do
     begin
          for i:=0 to 4 do
          begin
            for j:=0 to 7 do
            if font[ord(s[k]),i,j]<>0 then
                page2^[y+j,x+i]:=sint[((offset-(i*j))*2)mod 256];
          end;
          x:=x+6;
     end;
end;








procedure initpal;
var i:integer;
		p:palettetype;
begin
  	for i:=192 to 255 do begin {64 greyscales}
			p[i,1]:=i-192;
      p[i,2]:=i-192;
      p[i,3]:=0;{i-192;}
    end;
    setactivepalette(p,192,255);
end;





(* hier komt da 3d stufffff :)*)

PROCEDURE QuicksortTriangles(VAR tlist:trilist;l,r:integer);
VAR i,j:integer;
    key:longint;
    temp:Triangle;
begin
  while (l<r) do begin
    i:= 1; j:= r; key:= tlist[j].middenz;
    repeat
      while(i<j) and (tlist[i].middenz>=key) do i:=i+1;
      while(i<j) and (key>=tlist[j].middenz) do j:=j-1;
      if i<j then begin
         temp:=tlist[i];
         tlist[i]:=tlist[j];
         tlist[j]:=temp;
      end;
    until(i>=j);
    temp:=tlist[i];
    tlist[i]:=tlist[r];
    tlist[r]:=temp;
    if (i-l<r-i) then begin
       quicksorttriangles(tlist,l,i-1);
       l:=i+1;
       end
    else begin
       quicksorttriangles(tlist,i+1,r);
       r:=i-1;
    end;
  end;
end; {quicksorttriangles}




Procedure FillTriangleZClipped(VAR plist:pointlist; T:Triangle);
var r1,r2,r3,
    r4,r5,r6,
    x1,x2,
    z1,z2       : real;

    xa,ya,za,
    xb,yb,zb,
    xc,yc,zc,

    y,temp      : longint;
    done        : boolean;



    procedure hlin(x1,y1,x2:integer;z1,z2:real);
    var i:integer;
        t:integer;
        r:real;
    begin
         if x1<0 then x1:=0;
         if x2<0 then x2:=0;
         if x1>319 then x1:=319;
         if x2>319 then x2:=319;
         if ((y1>0) and (y1<199)) and (x1<>x2) then
         begin
              r:=((z2-z1)/(x2-x1));
              for i:=x1 to x2 do begin
                 if z1<0 then page2^[y1,i]:=vgacolor;
                 z1:=z1+r;
              end;
              for i:=x2 to x1 do begin
                  if z2<0 then page2^[y1,i]:=vgacolor;
                  z2:=z2+r;
              end;
         end;
    end;


begin
     vgacolor:=t.color;
     xa:=(plist[t.p1].rotp[0]);
     ya:=(plist[t.p1].rotp[1]);
     za:=(plist[t.p1].rotp[2]);
     xb:=(plist[t.p2].rotp[0]);
     yb:=(plist[t.p2].rotp[1]);
     zb:=(plist[t.p2].rotp[2]);
     xc:=(plist[t.p3].rotp[0]);
     yc:=(plist[t.p3].rotp[1]);
     zc:=(plist[t.p3].rotp[2]);

     (*sorteren van klein naar groot ya=kleinste*)
     {we moeten hebben ya<=yb and yb<=yc}

     if ya>yb then
     begin
          temp:=ya;ya:=yb;yb:=temp; {swap(ya,yb)}
          temp:=xa;xa:=xb;xb:=temp;
          temp:=za;za:=zb;zb:=temp;
     end;
     if yb>yc then
     begin
          temp:=yb;yb:=yc;yc:=temp; {swap(yb,yc);}
          temp:=xb;xb:=xc;xc:=temp;
          temp:=zb;zb:=zc;zc:=temp;
     end;
     if ya>yb then
     begin
         temp:=ya;ya:=yb;yb:=temp; {swap(ya,yb);}
         temp:=xa;xa:=xb;xb:=temp;
         temp:=za;za:=zb;zb:=temp;
     end;

     if not(((ya=yb) or (ya=yc)) or (yb=yc)) then begin
          r1:=(xb-xa)/(yb-ya); (*richt co van ab*)
          r2:=(xc-xb)/(yc-yb); (*richt co van bc*)
          r3:=(xc-xa)/(yc-ya); (*richt co van ac*)
          x1:=xa;
          x2:=xa;

          r4:=(zb-za)/(yb-ya); (*z richt co van ab*)
          r5:=(zc-zb)/(yc-yb); (*z richt co van bc*)
          r6:=(zc-za)/(yc-ya); (*z richt co van ac*)
          z1:=za;
          z2:=za;
          for y:=ya to yb-1 do begin
              hlin(round(x1),y,round(x2),z1,z2);
              x1:=x1+r1;  (*x'en van ab*)
              x2:=x2+r3;  (*x'en van ac*)
              z1:=z1+r4;
              z2:=z2+r6;
          end;
          for y:=yb to yc do begin
              hlin(round(x1),y,round(x2),z1,z2);
              x1:=x1+r2;   (*x'en van bc*)
              x2:=x2+r3;   (*x'en van ac*)
              z1:=z1+r5;
              z2:=z2+r6;
          end;
     end
     else if (ya=yc) then begin
        hlin(xa,ya,xc,za,zc); (*drie combinaties mogelijk om driehoek te hebben dat een lijnstuk is*)
        hlin(xa,ya,xb,za,zb);
        hlin(xb,ya,xc,zb,zc);
        end
     else if (ya=yb) then begin  (* x coord van lijnstukken ac en bc op array zetten*)
          r1:=(xc-xa)/(yc-ya); (*richt co van ac*)
          r2:=(xc-xb)/(yc-yb); (*richt co van bc*)
          x1:=xa;
          x2:=xb;

          r3:=(zc-za)/(yc-ya); (*richt co van ac*)
          r4:=(zc-zb)/(yc-yb); (*richt co van bc*)
          z1:=za;
          z2:=zb;
          for y:=ya to yc do begin
              hlin(round(x1),y,round(x2),z1,z2);
              x1:=x1+r1;
              x2:=x2+r2;
              z1:=z1+r3;
              z2:=z2+r4;
          end;
      end
     else begin
          r1:=(xc-xa)/(yc-ya); (*richt co van ac*)
          r2:=(xb-xa)/(yb-ya); (*richt co van ab*)
          x1:=xa;
          x2:=xa;

          r3:=(zc-za)/(yc-ya); (*richt co van ac*)
          r4:=(zb-za)/(yb-ya); (*richt co van ab*)
          z1:=za;
          z2:=za;
          for y:=ya to yc do begin
              hlin(round(x1),y,round(x2),z1,z2);
              x1:=x1+r1;
              x2:=x2+r2;
              z1:=z1+r3;
              z2:=z2+r4;
          end;
      end;
end; {FillTriangleZClipped}





Procedure VecMaalMat(v:vector ;m:matrix;var res:vector);
var i,j:INTEGER;
temp   :longint;
begin
 for i:=0 to 3 do begin
     res[i]:=0;
 end;
 temp:=0;
   for j:=0 TO 3 DO begin
     for i:=0 TO 3 DO begin
       temp:=round(v[i]*m[j,i]);
       res[j]:=res[j]+temp;
     end;
   end;
end; {vecmaalmat}

Procedure VecMaalMatNorm(v:normaal ;m:matrix;var res:normaal);
var i,j:INTEGER;
temp   :integer;
begin
 for i:=0 to 3 do begin
     res[i]:=0;
 end;
 temp:=0;
   for j:=0 TO 3 DO begin
     for i:=0 TO 3 DO begin
       temp:=round(v[i]*m[j,i]);
       res[j]:=res[j]+temp;
     end;
   end;
end; {vecmaalmatnorm}

Procedure MatMaalMat(m1,m2:matrix; VAR res:matrix);
var i,j,k:INTEGER;
    hulp: real;
BEGIN
 for i:=0 to 3 do begin
  for j:=0 to 3 do begin
   res[i,j]:=0;
  end;
 end;
 hulp:=0;
 for i:=0 to 3 do begin
  for j:=0 to 3 do begin
   for k:=0 to 3 do begin
     hulp:=m1[i,k]*m2[k,j];
     res[i,j]:=res[i,j]+hulp;
   end;
  end;
 end;
end; {matmaalmat}

procedure putpoint(VAR plist:pointlist; punt:Point);
BEGIN
  if plast<maxpoints then begin
   plist[plast]:=punt;
   plast:=plast+1;
  end;
end; { putpoint}

procedure putedge(VAR elist:edgelist; e:edge);
begin
 if elast<maxedge then begin
   elist[elast]:=e;
   elast:=elast+1;
 end;
end;



{
procedure StandHom(VAR v:vector);
VAR i:integer;
begin
  for i:=0 TO 2 do begin
   v[i]:=round((v[i] / v[3])*256);
  end;
  v[3]:=1;
end;
}


procedure GetNormaal(a,b,c:vector ;VAR N:normaal);
var afstand:real;
    i:integer;
begin
  N[0]:=-( ((b[1]-a[1])*(c[2]-a[2])) - ((c[1]-a[1])*(b[2]-a[2])) );
  N[1]:= ( ((b[0]-a[0])*(c[2]-a[2])) - ((c[0]-a[0])*(b[2]-a[2])) );
  N[2]:=-( ((b[0]-a[0])*(c[1]-a[1])) - ((c[0]-a[0])*(b[1]-a[1])) );
  (*in homogene coordinaat steken we de lengte van deze normaal*)
  afstand:=SQRT((N[0]*N[0])+(N[1]*N[1])+(N[2]*N[2]));
  for i:=0 to 2 do begin
    n[i]:=round((n[i]/afstand)*100); (*we leggen punten tussen 0 en 100*)
  end;
  n[3]:=1;
end; {getnormaal}


procedure puttriangle(VAR plist:pointlist;
                          VAR tlist: trilist; ptri:Triangle);

begin
  if tlast<maxtriangle then begin
     GetNormaal(plist[ptri.p1].p,plist[ptri.p2].p,plist[ptri.p3].p,ptri.normaal);
     tlist[tlast]:=ptri;
     tlast:=tlast+1;
  end;
end;{puttriangle}


procedure makepoint(x,y,z:longint; VAR punt:Point);
begin
 punt.p[0]:=x;
 punt.p[1]:=y;
 punt.p[2]:=z;
 Punt.p[3]:=1;
end; {makepoint}


procedure ActiveRotZ(hoek:byte;VAR m:matrix);
begin
  m[0,0]:=COSIN[hoek]; m[0,1]:=-SINUS[hoek]; m[0,2]:=0; m[0,3]:=0;
  m[1,0]:=SINUS[hoek]; m[1,1]:=COSIN[hoek]; m[1,2]:=0; m[1,3]:=0;
  m[2,0]:=0          ; m[2,1]:=0          ; m[2,2]:=1; m[2,3]:=0;
  m[3,0]:=0          ; m[3,1]:=0          ; m[3,2]:=0; m[3,3]:=1;
end;

procedure ActiveRotX(hoek:byte;VAR m:matrix);
begin
  m[0,0]:=1;    m[0,1]:=0;  m[0,2]:=0;  m[0,3]:=0;
  m[1,0]:=0;    m[1,1]:=COSIN[hoek]; m[1,2]:=-SINUS[hoek]; m[1,3]:=0;
  m[2,0]:=0;    m[2,1]:=SINUS[hoek]; m[2,2]:=COSIN[hoek]; m[2,3]:=0;
  m[3,0]:=0;    m[3,1]:=0;           m[3,2]:=0;         m[3,3]:=1;
end;

procedure ActiveRotY(hoek:byte;VAR m:matrix);
begin
  m[0,0]:=COSIN[hoek];  m[0,1]:=0;  m[0,2]:=SINUS[hoek]; m[0,3]:=0;
  m[1,0]:=0;            m[1,1]:=1;   m[1,2]:=0;           m[1,3]:=0;
  m[2,0]:=-SINUS[hoek]; m[2,1]:=0;   m[2,2]:=COSIN[hoek]; m[2,3]:=0;
  m[3,0]:=0;    m[3,1]:=0;           m[3,2]:=0;         m[3,3]:=1;
end;





{ hier is iets eigenaardigs aan de hand ik mag geen var nemen voor plist
   er wordt een bepaald punt verandert!!! waaakooooo maarja zo werkt het
   nadeel plist zal helemaal op stack gezet worden kan voor stack overflow
   zorgen dus zorg dat je stack memory goed hoog zet :)
	blijkbaar is het probleem bij BORLAND PASCAL opgelost :)
}
procedure BuildEdges(VAR tlist:trilist;VAR elist:edgelist;var plist:pointlist);

  function samepoints(a,b:integer):boolean;
  var j   :integer;
      hulp:boolean;
  begin
   hulp:=true;
   j:=0;
   while (j<=2) and hulp do begin
     if plist[a].p[j]<>plist[b].p[j] then begin
        hulp:=false;
     end;
     j:=j+1;
   end;
   samepoints:=hulp;
  end; {samepoints}


  function Duplicate(e:edge; var dupplaats:integer):boolean;
  var j    : integer;
      hulp : boolean;
  begin
    j:=0;
    hulp:=false;
    while ((j<=elast-1) and (not hulp)) do begin
        if samepoints(elist[j].pa,e.pa) then begin
          if samepoints(elist[j].pb,e.pb) then begin
            hulp:=true;
            dupplaats:=j;
          end;
        end;
        if samepoints(elist[j].pa,e.pb) then begin
          if samepoints(elist[j].pb,e.pa) then begin
            hulp:=true;
            dupplaats:=j;
          end;
        end;
      j:=j+1;
    end;
    duplicate:=hulp;
  end; {duplicate}


  function samenorm(a,b:normaal):boolean;
  var i    :integer;
      done :boolean;
  begin
    i:=0;
    done:=true;
    while (i<=3) and (done) do begin
      if abs(abs(a[i])-abs(b[i])) > 2 then done:=false;
      i:=i+1;
    end;
    samenorm:=done;
  end; {samenorm}


var i,dupplaats:integer;
    e:edge;
begin
 for i:=0 to tlast-1 do begin
   e.pa:=tlist[i].p1;
   e.pb:=tlist[i].p2;
   e.t1:=i;
   e.t2:=-1;
   e.internal:=false;
   if duplicate(e,dupplaats) then begin
     elist[dupplaats].t2:=e.t1;
     if samenorm(tlist[elist[dupplaats].t1].normaal,tlist[elist[dupplaats].t2].normaal) then begin
        elist[dupplaats].internal:=true;
     end;
    end
   else begin
     putedge(elist,e);
   end;
   e.pa:=tlist[i].p2;
   e.pb:=tlist[i].p3;
   e.t1:=i;
   e.t2:=-1;
   e.internal:=false;
   if duplicate(e,dupplaats) then begin
     elist[dupplaats].t2:=e.t1;
     if samenorm(tlist[elist[dupplaats].t1].normaal,tlist[elist[dupplaats].t2].normaal) then begin
        elist[dupplaats].internal:=true;
     end;
    end
   else begin
     putedge(elist,e);
   end;
   e.pa:=tlist[i].p3;
   e.pb:=tlist[i].p1;
   e.t1:=i;
   e.t2:=-1;
   e.internal:=false;
   if duplicate(e,dupplaats) then begin
     elist[dupplaats].t2:=e.t1;
     if samenorm(tlist[elist[dupplaats].t1].normaal,tlist[elist[dupplaats].t2].normaal) then begin
        elist[dupplaats].internal:=true;
     end;
    end
   else begin
     putedge(elist,e);
   end;
 end;
end; {buildedges}

function verschillend(a,b:vector):boolean;
var i:integer;
    hulp:boolean;
begin
  hulp:=false;
  for i:=0 to 3 do begin
     if a[i]<>b[i] then hulp:=true;
  end;
  verschillend:=hulp;
end;



PROCEDURE buildtriangles(VAR plist:pointlist; aantal:integer;
                                              VAR tlist:trilist);
VAR loper,daar2,daar,welkvlak,i:integer;
    Tvlak1,Tvlak2:Triangle;
    done:boolean;
begin
 welkvlak:=1;
 loper:=0;
 done:=false;
 while not done do begin
  if (welkvlak mod aantal)<>0 THEN begin
   daar2:=loper+aantal;
   if (daar2 > (plast-1)) or ((daar2+1)>(plast-1)) then begin
     done:=true;
   end;
   if not done then begin
      if verschillend(plist[loper].p,plist[daar2+1].p)
         and verschillend(plist[daar2].p,plist[daar2+1].p)
         and verschillend(plist[daar2].p,plist[loper].p) then begin
           Tvlak1.p1:=loper;
           Tvlak1.p3:=daar2+1;
           Tvlak1.p2:=daar2;
           puttriangle(plist,tlist,Tvlak1);
      end;
      if verschillend(plist[loper].p,plist[loper+1].p)
         and verschillend(plist[daar2+1].p,plist[loper+1].p)
         and verschillend(plist[daar2].p,plist[loper+1].p) then begin
           Tvlak2.p1:=loper;
           Tvlak2.p3:=loper+1;
           Tvlak2.p2:=daar2+1;
           puttriangle(plist,tlist,Tvlak2);
      end;
    end;{if not done}
   end; {if welkvlak}
    inc(welkvlak,1);
    inc(loper,1);
 end; {while}
 (*laatste schil nog*)
 for i:=0 to aantal-2 do begin
     Tvlak1.p1:=(plast-aantal)+i;
     Tvlak1.p3:=(plast-aantal)+1+i;
     Tvlak1.p2:=i;
     puttriangle(plist,tlist,Tvlak1);
     Tvlak1.p1:=i;
     Tvlak1.p2:=1+i;
     Tvlak1.p3:=(plast-aantal)+1+i;
     puttriangle(plist,tlist,Tvlak1);
 end;
end;


procedure triangletextco(var t:triangle);
const ytop=40;
begin

    (* if bitmap=1 then begin *)
      t.u1:=60   ; t.v1:=100 ;
      t.u2:=60   ; t.v2:=140 ;
      t.u3:=180  ; t.v3:=100 ;
    (*  end
     else begin
      t.u1:=30  ; t.v1:=155+ytop ;
      t.u2:=180 ; t.v2:=155+ytop ;
      t.u3:=180 ; t.v3:=0+ytop ;
     end;  *)

end;

procedure puttextureobject(var tlist:trilist);
var i:integer;
begin
     for i:=0 to tlast-1 do begin
        triangletextco(tlist[i]);
     end;
end;


PROCEDURE putcircle(VAR plist:pointlist);
var i:integer;
    c:point;
begin
  i:=255;
  while i>=10 do begin
     makepoint(round((SINUS[i]*60)+120),round(COSIN[i]*60),0,c);
     putpoint(plist,c);
     dec(i,26);
  end;
  putpoint(plist,plist[0]);
end;

PROCEDURE maketorus(var plist:pointlist;var tlist:trilist);
var i,j,k,schil:integer;
    m:matrix;
    temp:point;
begin
 putcircle(plist);
 schil:=plast;
 i:=26;        {26 is mooier}
 while i<255 do begin
   ActiveRotY(i,m);
   for j:=0 to schil-1 do begin
     vecmaalmat(plist[j].p,m,temp.p);
     putpoint(plist,temp);
   end;
   inc(i,26);
 end;

 buildtriangles(plist,schil,tlist);
end;





procedure rotedges(var plist:pointlist;
                        var elist:edgelist;
                        var tlist:trilist;
                        hoekx,hoeky,hoekz:byte);
var
    m1,m2,m3,m:matrix;
    temp:longint;
    i:integer;
    tempcol:integer;
begin
  ActiveRotx(hoekx,m1);
  ActiveRoty(hoeky,m2);
  ActiveRotz(hoekz,m3);
  Matmaalmat(m2,m1,m);
  Matmaalmat(m3,m,m);
  for i:= 0 to plast-1 do begin
      vecmaalmat(plist[i].p,m,plist[i].rotp);
      plist[i].rotp[0]:=(plist[i].rotp[0]*SizeX)div(plist[i].rotp[2]+350) +160;
      plist[i].rotp[1]:=(plist[i].rotp[1]*SizeY)div(plist[i].rotp[2]+350) +100;
      (*die laatste +300 en +200 zijn voor verschuiving!*)
  end;
  for i:=0 to tlast-1 do begin
      vecmaalmatnorm(tlist[i].normaal,m,tlist[i].rnormaal);
      (*we nemen even gewogen gemiddelde van z waardes oops quicksort
      sorteert verkeert om oh wel we zetten er maar een minneke voor :)*)
      tlist[i].middenz:=-(plist[tlist[i].p1].rotp[2]+
                         plist[tlist[i].p2].rotp[2]+
                          plist[tlist[i].p3].rotp[2]);

      tlist[i].color:=round(tlist[i].rnormaal[2]*254); {(i mod 4)+1;}

  end;
  for i:=0 to elast-1 do begin
      elist[i].middenz:=plist[elist[i].pa].rotp[2]+
                           plist[elist[i].pb].rotp[2];
      if (elist[i].t2>-1) then begin
        tempcol:=127+round((tlist[elist[i].t1].rnormaal[2]*127));
        if tlist[elist[i].t2].rnormaal[2]>0 then begin
           tempcol:=tempcol+(127+round((tlist[elist[i].t2].rnormaal[2]*127)));
           tempcol:=tempcol div 2;
        end;
        elist[i].color:=tempcol;
       end
      else begin
       elist[i].color:=0; {round((tlist[elist[i].t1].rnormaal[2]*15));}
      end;
  end;
end;{rotedges}





procedure Rotfast(var plist:pointlist;
                  var tlist:trilist;
                  hoekx,hoeky,hoekz:byte);
const
   FixPoint=255;
var

   Ai,Bi,Ci,
   Di,Ei,Fi,
   Gi,Hi,Ii,
   i,tempcol : integer;
	 distance,xmove,ymove:integer;
begin
   (*doin it the fast way with 9 multiplies! *)
  Ai:=round(COSIN[hoekz]*COSIN[hoeky]*FixPoint);
  Bi:=round(SINUS[hoekz]*COSIN[hoeky]*FixPoint);
  Ci:=round(-SINUS[hoeky]*FixPoint);
  Di:=round(((SINUS[hoekx]*SINUS[hoeky]*COSIN[hoekz])-(COSIN[hoekx]*SINUS[hoekz]))*FixPoint);
  Ei:=round(((SINUS[hoekx]*SINUS[hoeky]*SINUS[hoekz])+(COSIN[hoekx]*COSIN[hoekz]))*FixPoint);
  Fi:=round(SINUS[hoekx]*COSIN[hoeky]*FixPoint);
  Gi:=round(((COSIN[hoekx]*SINUS[hoeky]*COSIN[hoekz])+(SINUS[hoekx]*SINUS[hoekz]))*FixPoint);
  Hi:=round(((COSIN[hoekx]*SINUS[hoeky]*SINUS[hoekz])-(SINUS[hoekx]*COSIN[hoekz]))*FixPoint);
  Ii:=round(COSIN[hoekx]*COSIN[hoeky]*FixPoint);

   (*x y and z rotation in once!!!*)

   distance:=20+round(sin(offset*(pi/143))*150);
   xmove:=round(sin(offset*(pi/157))*80);
   ymove:=round(cos(offset*(pi/132))*50);
   for i:= 0 to plast-1 do begin
      plist[i].rotp[0]:=(Ai*plist[i].p[0]+(Bi*plist[i].p[1])+(Ci*plist[i].p[2]))div fixpoint;
      plist[i].rotp[1]:=(Di*plist[i].p[0]+(Ei*plist[i].p[1])+(Fi*plist[i].p[2]))div fixpoint;
      plist[i].rotp[2]:=(Gi*plist[i].p[0]+(Hi*plist[i].p[1])+(Ii*plist[i].p[2]))div fixpoint;

      {perspectief}
      plist[i].rotp[0]:=xmove+(plist[i].rotp[0]*SizeX) div (plist[i].rotp[2]+350) + CenterX;
      plist[i].rotp[1]:=ymove+(plist[i].rotp[1]*SizeY) div (plist[i].rotp[2]+350) + CenterY;

      {gewoon effie het laten wegvliegen en terugkomen (zonder perspectief)}
      plist[i].rotp[2]:=plist[i].rotp[2]+distance;

      (*die laatste +centerx en +centery zijn voor verschuiving!*)
  end;
   for i:=0 to tlast-1 do begin
      tlist[i].rnormaal[2]:=(Gi*tlist[i].normaal[0])+(Hi*tlist[i].normaal[1])+(Ii*tlist[i].normaal[2]);
       (*we nemen even gewogen gemiddelde van z waardes *)
      tlist[i].middenz:=plist[tlist[i].p1].rotp[2]+
                         plist[tlist[i].p2].rotp[2]+
                          plist[tlist[i].p3].rotp[2];

      tempcol:=tlist[i].rnormaal[2] div 400+192;{tussen 192 en 255}
      if tempcol>255 then tlist[i].color:=255
      else tlist[i].color:=tempcol;

  end;
end; (*rotfast*)





procedure tekenzclipped(VAR plist:pointlist;var tlist:trilist);
var i:integer;
begin
   for i:=0 to tlast-1 do begin
    if tlist[i].rnormaal[2]> 0 THEN
    FillTrianglezclipped(plist,tlist[i]);
  end;
end;



procedure drawtext;
begin
	offset:=(offset +1) mod 15000;
  printflashy(116,50,'3D Z-CLIPPING');
  printflashy(116,55,'-------------');
  printflashy(42,80,'PROGRAMMED BY : WALTER SCHREPPERS');
  printflashy(42,90,'          AKA   hOmEbOy wAllE');
  printflashy(42,120,'        email : WALLE@MAIL.DMA.BE');
  printflashy(22,150,'DONUTS, IS THERE ANYTHING THEY CAN''T DO ???');
end;


procedure playtitlepage;
var x,y,z:byte;
    a,b,c:integer;
begin
   x:=63;
   y:=0;
   z:=0;
   a:=1;
   b:=2;
   c:=2;
   repeat
       clrpage2scr;
       drawtext;

       tekenzclipped(plist,tlist);
       vsync;
       copyfrompage2;
       x:=x+a;
       y:=y+b;
       z:=z+c;
       rotfast(plist,tlist,x,y,z);
       quicksortTriangles(tlist,0,tlast-1);
   until key[scSpace];
   repeat
   until not key[scSpace];
end; (*playtitlepage*)




procedure playscreen;
var i:integer;
begin
  CenterX:=160;   CenterY:=100;
  SizeX:=100;     SizeY:=100;
  elast:=0;       plast:=0;     tlast:=0;

   {deze zal iets initialiseren wat ik niet weet}
	 rotedges(plist,elist,tlist,0,0,0);
   {doe die rotedges weg en het zal crashen indien je playtorus als 1e oproept}

   maketorus(plist,tlist);
   buildedges(tlist,elist,plist);


   playtitlepage;
end;{playscreen}


begin
  installfastkeys;
  govga256;
  initpal;
  inittables;
  PlayScreen;
  restorekeyboard;
  restoremode;
end.

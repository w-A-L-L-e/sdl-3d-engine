uses fastvga,fastkeys,crt;

type
    commentaar=
    object
          s:string;
          color:byte;
          procedure draw;
          procedure add(ss:string);
    end;

var
   comm:commentaar;

type
    vuur=
    object
          x,y,dx,dy:integer;
          exists:boolean;
          color:byte;
          procedure move;
    end;

procedure commentaar.add(ss:string);
begin
     s:=ss;
     color:=31;
end;

procedure vuur.move;
begin
     if exists then
     begin
       dy:=dy+1;
       y:=y+dy div 4;
       x:=x+dx;
       if random<0.1 then dx:=dx+random(3)-1;
       if (y>190) or (x<2) or (x>218) then exists:=false;
     end;
end;

var
   vuurwerk:array[1..500] of vuur;

procedure addvuur(xx,yy:integer);
var
   i,j,nr:integer;
begin
     i:=1;
     nr:=0;
     while (i<500) and (nr=0) do
     begin
           if not vuurwerk[i].exists then
              nr:=i;
           inc(i);
     end;
     if nr<>0 then
     with vuurwerk[nr] do
     begin
          x:=xx;
          y:=yy;
          dx:=random(7)-3;
          dy:=-random(30)+14;
          exists:=true;
          color:=60+random(16);
     end;
end;

type ft=array[0..255,0..4,0..7] of byte;
type
   points = record
     xa:integer;
     ya:integer;
     xb:integer;
     yb:integer;
   end;



type score = record
                 name   : string;
                 points : longint;
             end;
     scoretable = array [1..10] of score;




{---------------------------------globals-----------------------------------}
var
   veldco: array[0..10,0..9] of points; {voor 2 player was het 0..10,0..9}
   {font    :ft;}
   ballcount,blockcount,
   nrplayer,
   yblocks,
   lives,level,
   wallboven,decwallboven,
   wallonder,decwallonder  :integer;
   SINUS: array [0..255] of byte;
   done:boolean;
   Pal,black:palettetype;
   highscore : longint;
   scores    : scoretable;




{------------font in pas file gestoken om geen font.dat te hebben :)-------}

const
font : ARRAY [0..255,0..4,0..7] OF BYTE =
(((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(15,15,15,15,15,0,15,15),
(15,15,15,15,0,0,15,15),
(15,15,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,15,0,0,15,0,0),
(0,15,0,15,0,0,15,0),
(15,15,15,15,15,15,15,15),
(0,15,0,15,0,0,15,0),
(0,0,15,0,15,15,0,0)
),
((0,0,15,0,0,0,15,0),
(0,15,0,15,0,15,0,0),
(0,0,15,0,15,0,15,0),
(0,0,0,15,0,15,0,15),
(0,0,15,0,0,0,15,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,15,0,15,0,0,0,0),
(15,15,15,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,15,0,0),
(0,15,0,0,0,0,15,0),
(15,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,15),
(0,15,0,0,0,0,15,0),
(0,0,15,15,15,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0),
(0,15,15,15,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,15,15,0,15),
(0,0,0,0,15,15,15,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0),
(0,0,0,15,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,15,15,15,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,15),
(0,0,0,0,0,15,15,0),
(0,0,0,15,15,0,0,0),
(0,15,15,0,0,0,0,0),
(15,0,0,0,0,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,15,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,15,0,0,0,15,0,0),
(15,15,15,15,15,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,15,0,0,0,15,0,0),
(15,0,0,0,15,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,0,0,0,15,0,0)
),
((0,15,0,0,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((0,0,0,0,15,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,15,0,15,0,0,0),
(0,15,0,0,15,0,0,0),
(15,15,15,15,15,15,0,0)
),
((15,15,15,0,15,0,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,0,15,15,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,0,15,15,0,0,0)
),
((15,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,0),
(15,0,0,15,0,0,0,0),
(15,0,0,15,15,15,0,0),
(15,15,15,0,0,0,0,0)
),
((0,15,0,15,15,0,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((0,15,15,0,0,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,0,15,0,15,0,0),
(0,15,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,15,0,0,15,15,0,0),
(15,15,0,0,15,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,15,0,0,0,0),
(0,0,15,0,15,0,0,0),
(0,15,0,0,0,15,0,0),
(15,0,0,0,0,0,15,0),
(0,0,0,0,0,0,0,0)
),
((0,0,15,0,15,0,0,0),
(0,0,15,0,15,0,0,0),
(0,0,15,0,15,0,0,0),
(0,0,15,0,15,0,0,0),
(0,0,15,0,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(15,0,0,0,0,0,15,0),
(0,15,0,0,0,15,0,0),
(0,0,15,0,15,0,0,0),
(0,0,0,15,0,0,0,0)
),
((0,15,15,0,0,0,0,0),
(15,0,0,0,0,0,0,0),
(15,0,0,0,15,15,0,15),
(15,0,0,15,0,0,0,0),
(0,15,15,0,0,0,0,0)
),
((0,15,15,15,15,15,15,0),
(15,0,0,0,0,0,0,15),
(15,0,0,15,15,15,0,15),
(15,0,0,15,15,15,0,15),
(0,15,15,15,15,0,0,15)
),
((0,15,15,15,15,15,0,0),
(15,0,0,0,15,0,0,0),
(15,0,0,0,15,0,0,0),
(15,0,0,0,15,0,0,0),
(0,15,15,15,15,15,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(0,15,0,0,15,0,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(0,15,15,15,15,0,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,15,0,0,0,0,0),
(15,0,15,0,0,0,0,0),
(15,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,15,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((15,15,15,15,15,15,0,0),
(0,0,0,0,15,0,0,0),
(0,0,0,0,15,0,0,0),
(0,0,0,0,15,0,0,0),
(15,15,15,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(15,0,0,0,0,15,0,0),
(15,15,15,15,15,15,0,0),
(15,0,0,0,0,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,15,0,0,0),
(0,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,15,15,15,15,0,0,0),
(15,0,0,0,0,0,0,0)
),
((15,15,15,15,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,15,15,0,0,0,0),
(0,15,0,0,15,0,0,0),
(15,0,0,0,0,15,0,0)
),
((15,15,15,15,15,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,0,0,0)
),
((15,15,15,15,15,15,0,0),
(0,15,0,0,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,15,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0)
),
((15,15,15,15,15,15,0,0),
(0,15,0,0,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,0,0,0,0),
(15,15,15,15,15,15,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,0,15,0,0),
(0,15,15,15,15,0,0,0)
),
((15,15,15,15,15,15,0,0),
(15,0,0,15,0,0,0,0),
(15,0,0,15,0,0,0,0),
(15,0,0,15,0,0,0,0),
(0,15,15,0,0,0,0,0)
),
((0,15,15,15,15,0,0,0),
(15,0,0,0,0,15,0,0),
(15,0,0,0,15,15,0,0),
(15,0,0,0,0,15,0,0),
(0,15,15,15,15,0,15,0)
),
((15,15,15,15,15,15,0,0),
(15,0,0,15,0,0,0,0),
(15,0,0,15,0,0,0,0),
(15,0,15,0,15,0,0,0),
(15,15,0,0,0,15,0,0)
),
((0,15,0,0,15,0,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,0,0,15,15,0,0,0)
),
((15,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0),
(15,0,0,0,0,0,0,0),
(15,0,0,0,0,0,0,0)
),
((15,15,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(15,15,15,15,15,0,0,0)
),
((15,15,0,0,0,0,0,0),
(0,0,15,15,0,0,0,0),
(0,0,0,0,15,15,0,0),
(0,0,15,15,0,0,0,0),
(15,15,0,0,0,0,0,0)
),
((15,15,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(15,15,15,15,15,0,0,0)
),
((15,0,0,0,0,15,0,0),
(0,15,0,0,15,0,0,0),
(0,0,15,15,0,0,0,0),
(0,15,0,0,15,0,0,0),
(15,0,0,0,0,15,0,0)
),
((15,15,15,0,0,15,0,0),
(0,0,0,15,0,15,0,0),
(0,0,0,15,0,15,0,0),
(0,0,0,15,0,15,0,0),
(15,15,15,15,15,0,0,0)
),
((15,0,0,0,0,15,0,0),
(15,0,0,0,15,15,0,0),
(15,0,0,15,0,15,0,0),
(15,0,15,0,0,15,0,0),
(15,15,0,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((15,0,0,0,0,0,0,0),
(0,15,15,0,0,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,0,0,0,15,15,0),
(0,0,0,0,0,0,0,15)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,15),
(0,0,0,0,0,0,0,15)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,15,0,0,15,0,0,0),
(0,15,0,15,0,15,0,0),
(0,15,0,15,0,15,0,0),
(0,0,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(15,15,15,15,15,0,0,0),
(0,0,0,15,0,15,0,0),
(0,0,15,0,0,15,0,0),
(0,0,0,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,15,0,0,0,15,0,0),
(0,15,0,0,0,15,0,0),
(0,0,15,0,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,15,0,0,15,0,0),
(0,0,0,15,0,15,0,0),
(15,15,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,15,0,0,0,15,0,0),
(0,15,0,15,0,15,0,0),
(0,0,15,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,15,0,0),
(0,15,0,0,15,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,15,0),
(0,0,15,15,0,0,0,15),
(0,15,0,0,15,0,0,15),
(0,15,0,0,15,0,0,15),
(0,0,15,15,15,15,15,0)
),
((0,0,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,0,15,15,15,15,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,15,15,0,0),
(0,0,0,0,0,0,15,0),
(15,0,15,15,15,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0),
(0,0,0,0,15,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,15,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,15,15,15,15,15,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,15,15,15,0,0),
(0,0,15,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,15,15,15,0,0),
(0,0,15,0,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,15,15,0,0,0),
(0,0,15,0,0,15,0,0),
(0,0,15,0,0,15,0,0),
(0,0,0,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,15,15,15,15,15,0,0),
(0,15,0,15,0,0,0,0),
(0,15,0,15,0,0,0,0),
(0,0,15,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,15,0,15,0,0,0,0),
(0,15,0,15,0,0,0,0),
(0,15,15,15,15,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,15,0,0,0,0,0),
(0,0,0,15,0,0,0,0)
),
((0,0,0,0,15,0,0,0),
(0,0,15,0,0,15,0,0),
(0,15,0,15,0,15,0,0),
(0,15,0,15,0,15,0,0),
(0,15,0,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,15,15,15,15,0,0,0),
(0,0,15,0,0,15,0,0),
(0,0,0,0,15,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,15,15,15,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,15,15,15,0,0,0),
(0,0,0,0,0,15,0,0),
(0,0,0,15,15,15,0,0),
(0,0,0,0,0,15,0,0),
(0,0,15,15,15,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,0,15,15,0,0),
(0,0,0,15,0,0,0,0),
(0,0,15,0,15,15,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,15,0,0,0,15),
(0,0,0,0,15,0,0,15),
(0,0,15,15,15,15,15,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,15,0,0,15,0,0),
(0,0,15,0,15,15,0,0),
(0,0,15,15,0,15,0,0),
(0,0,15,0,0,15,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(15,15,15,15,15,15,15,15),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
),
((0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0)
)
);



{------------------------------font end------------------------------------}




procedure fadeinto(a,b:palettetype);
var i:integer;
    temp:boolean;
begin
 for i:=1 to maxpull(a,b,0,255) do begin
      PullToPalette (a,b,0,255,Temp); { Move P from Black }
      if (i mod 4)=0 then SetActivePalette (a,0,255); { Activate the new palette }
 end;
 SetActivePalette(a,0,255);
end;







type
    bullet=
    object
          x,y:integer;
          hoek:integer;
          exists:boolean;
          lastkick:integer;
          procedure move;
          procedure draw;
    end;

var bullets: array [1..2] of bullet;

type
    ball=
    object
          x,y:real;
          snelheid:real;
          hoek:real;
          exists:boolean;
          fireball:boolean;
          lastkick:integer;
          procedure move;
          procedure draw;
    end;


type
    paddle=
    object
          nr:integer;
          x,y:integer;
          lengte:integer;
          dx:integer;
          color:byte;
          keyleft,keyright,keyshoot:byte;
          points:longint;
          abletoshoot:integer;
          procedure move;
          procedure draw;
          procedure shoot;
    end;

var
   paddles:array[0..2] of paddle;

procedure paddle.shoot;
begin
     if abletoshoot>0 then
     begin
          dec(abletoshoot);
          bullets[nr].x:=x;
          bullets[nr].exists:=true;
          bullets[nr].y:=y;
          if y<100 then
             bullets[nr].hoek:=4
          else
             bullets[nr].hoek:=-4;
          bullets[nr].lastkick:=nr;
     end;
end;

procedure bullet.draw;
begin
     if exists then
     begin
       page2^[y,x]:=14;
       page2^[y-1,x]:=14;
       page2^[y,x-1]:=14;
       page2^[y,x+1]:=14;
       page2^[y+1,x]:=14;
       addvuur(x,y);
       addvuur(x,y);
     end;
end;

var offset:integer;


{loaden font is nu overbodig, deze is gedefinieerd als een const array}
{
procedure loadfont;
var
   f:file of ft;
begin
     assign(f,'font.dat');
     reset(f);
     read(f,font);
     close(f);
end;
 }


procedure writen(x,y:integer;s:string;color:byte);
var
   i,j,k:integer;
begin
     for k:=1 to length(s) do
     begin
          for i:=0 to 4 do
          for j:=0 to 7 do
          if font[ord(s[k]),i,j]<>0 then
              page2^[y+j,x+i]:=color;
          x:=x+6;
     end;
end;

procedure writeshow(x,y:integer;s:string;color:byte);
var
   i,j,k,c:integer;
begin
     for k:=1 to length(s) do
     begin
          for i:=0 to 4 do
          begin
               c:=round(2*cos((x+i+offset)/8));
            for j:=0 to 7 do
            if font[ord(s[k]),i,j]<>0 then
                page2^[y+j+c,x+i]:=color;
          end;
          x:=x+6;
     end;
end;


procedure writeflashy(x,y:integer;s:string);
var
   i,j,k,c:integer;
begin
     for k:=1 to length(s) do
     begin
          for i:=0 to 4 do
          begin
            for j:=0 to 7 do
            if font[ord(s[k]),i,j]<>0 then
                page2^[y+j,x+i]:=sinus[((offset-(i*j))*2)mod 256];
          end;
          x:=x+6;
     end;
end;



procedure commentaar.draw;
begin
     if color>16 then
     begin
          if offset mod 8 =0 then
          dec(color);
          writen(270-length(s)*3,96,s,color);
     end;
end;



var
   veld:array[0..10,0..9] of integer; {voor 2 player mode is 0..9 voor de y-as genoeg}

procedure bullet.move;
var
   i,j,k:integer;
begin
     if exists then
     begin
       y:=y+hoek;
       draw;
       for i:=0 to 10 do begin
       for j:=0 to 9 do begin
       if veld[i,j]<>0 then
           if (y>veldco[i,j].ya) and (y<veldco[i,j].yb) and (x>veldco[i,j].xa) and (x<veldco[i,j].xb) then
           begin
              if (veld[i,j]>0) and (veld[i,j]<200) then
               inc(paddles[lastkick].points,40);
              if (veld[i,j]=200) then
              inc(paddles[lastkick].points,1000);
              veld[i,j]:=0;
              exists:=false;
           end;
       end;
       end;
       if nrplayer>1 then
          for i:=1 to 2 do begin
            if (i<>lastkick) and ((y<10) or (y>190)) and
                 (x>paddles[i].x-(paddles[i].lengte div 2))
                 and (x<paddles[i].x+(paddles[i].lengte div 2))
            then
            begin
                exists:=false;
                inc(paddles[lastkick].points,2000);
                comm.add('DIRECT HIT !!!');
            end;
            if (y<0) or (y>199) then exists:=false;
          end
       else if(y<0) or (y>199) then exists:=false;
     end;
end;

procedure paddle.move;
begin
     if key[keyleft] then dx:=dx-2;
     if key[keyright] then dx:=dx+2;
     if key[keyshoot] then begin
        shoot;
        key[keyshoot]:=false;
     end;
     if dx>0 then dx:=dx-1;
     if dx<0 then dx:=dx+1;
     if dx<-5 then dx:=-5;
     if dx>5 then dx:=5;
     x:=x+dx;
     if x-lengte div 2 <1 then begin x:=lengte div 2+1;dx:=0; end;
     if x+lengte div 2 >219 then begin x:=219-lengte div 2;dx:=0; end;
end;

procedure paddle.draw;
var s :string;
begin
     vgacolor:=color;
     boxpage2(x-lengte div 2+1,y-2,x+lengte div 2-1,y+3);
     vgacolor:=color-24;
     linepage2(x-lengte div 2+1,y-3,x+lengte div 2-1,y-3);
     linepage2(x-lengte div 2,y-2,x-lengte div 2,y+2);
     vgacolor:=color+24;
     linepage2(x-lengte div 2+1,y+4,x+lengte div 2-1,y+4);
     linepage2(x+lengte div 2,y+3,x+lengte div 2,y-2);
     if (abletoshoot>0) then begin
         str(abletoshoot,s);
         writen(x-length('shoot')*3,y-2,'SHOOT '+s,0);
     end
     else begin
         str(points,s);
         writen(x-length(s)*3,y-2,s,0);
     end;
end;


var
   balls:array[1..100] of ball;

procedure addball(xx,yy,snel:real;last:integer;fire:boolean);
var
   nr,i,j:integer;
begin
     nr:=0;
     for i:= 1 to 10 do {we leggen een maximum van 10 ballen op omdat 100 niet speelbaar is}
         if not balls[i].exists then nr:=i;
     if nr<>0 then
     begin
          balls[nr].exists:=true;
          balls[nr].fireball:=fire;
          balls[nr].x:=xx;
          balls[nr].y:=yy;
          balls[nr].snelheid:=snel;
          balls[nr].lastkick:=last;
          if random<0.5 then
             balls[nr].hoek:=pi/4+random*pi/2
          else
             balls[nr].hoek:=5*pi/4+random*pi/2;
     end;
end;

procedure ball.move;
var
   xx,yy:real;
   i,j,k,s:integer;
   x1,x2,y1,y2,xb,yb:integer;
   xa,ya:real;


begin
     if snelheid<1.5 then
     snelheid:=snelheid+0.00025;
     if exists then
     begin
       xx:=x+snelheid*cos(hoek);
       yy:=y+snelheid*sin(hoek);
       if (xx<2) or (xx>218) then hoek:=pi-hoek;
       if ((wallboven>0) and (yy<2)) then
       begin
            hoek:=-hoek;
            dec(wallboven,decwallboven);
       end;
       if ((wallonder>0) and (yy>197)) then
       begin
            hoek:=-hoek;
            dec(wallonder,decwallonder);
       end;
       for i:= 1 to 2 do
       begin
            x1:=paddles[i].x-(paddles[i].lengte div 2);
            y1:=paddles[i].y-5;
            x2:=paddles[i].x+(paddles[i].lengte div 2);
            y2:=paddles[i].y+5;
            if (x1<=xx) and (x2>=xx) and (y1<=yy) and (y2>=yy) then {in paddle}
            begin
             lastkick:=i;
             if (x<x1) or (x>x2) then hoek:=pi-hoek;
             if (y<y1) then
             begin
               hoek:=-hoek+(x-(x2+x1) div 2)/(x2-x1)*4;
               if sin(hoek)>=-0.5 then
               if cos(hoek)<0 then hoek:=pi*5/4
                              else hoek:=-pi/4;
             end;
             if (y>y2) then
             begin
               hoek:=-hoek-(x-(x2+x1) div 2)/(x2-x1)*4;
               if sin(hoek)<=0.5 then
               if cos(hoek)<0 then hoek:=pi*3/4
                              else hoek:=pi/4;
             end;
            end;
       end;
       for i:=0 to 10 do
       for j:=0 to 9 do begin
           if (veldco[i,j].xa<xx) and (veldco[i,j].xb>xx)
               and (veldco[i,j].ya<yy) and (veldco[i,j].yb>yy)
               and (veld[i,j]<>0) then begin{in blok}
             x1:=veldco[i,j].xa;
             y1:=veldco[i,j].ya;
             x2:=veldco[i,j].xb;
             y2:=veldco[i,j].yb;
{             testbotsing(false);}
             if not fireball then
             begin
               if (x<x1) or (x>x2) then hoek:=pi-hoek;
               if (y<y1) or (y>y2) then hoek:=-hoek;
             end;
             {witte block}
             if veld[i,j]=200 then
                inc(paddles[lastkick].points,980);
             if veld[i,j]=200 then
             for k:=1 to 90 do
                 addvuur(round(x),round(y));
             inc(paddles[lastkick].points,20);
             for k:=1 to 10 do
                 addvuur(round(x),round(y));



{specials*******************************************************************}
{specials*******************************************************************}
{specials*******************************************************************}
{specials*******************************************************************}
{specials*******************************************************************}
{specials*******************************************************************}
             if random<0.1 then begin
                if snelheid>3.5 then begin
                   snelheid:=2.5;
                   comm.add('SLOWDOWN :)');
                end
                else begin
                   snelheid:=snelheid+0.3;
                   comm.add('SPEEDUP !!!');
                end;
             end;
             if random<0.1 then begin
                fireball:=not fireball;
                if fireball then comm.add('FIREBALL ON !!!')
                else comm.add('FIREBALL OFF');
             end;
             if random<0.1 then begin
                inc(paddles[lastkick].abletoshoot,3);
                comm.add('FIRE AT WILL');
             end;
             if random<0.05 then
             begin
                addball(x,y,2,lastkick,fireball);
                comm.add('EXTRA BALL');
             end;
             if random<0.1 then
             begin
                  paddles[lastkick].lengte:=140-paddles[lastkick].lengte;
                  if paddles[lastkick].lengte>40 then  comm.add('PADDLE INCREASED')
                  else  comm.add('pAddLe dEcrEAsEd');
                  with paddles[lastkick] do
                  begin
                       if x-lengte div 2 <1 then begin x:=lengte div 2+1;dx:=0; end;
                       if x+lengte div 2 >219 then begin x:=219-lengte div 2;dx:=0; end;
                  end;
             end;

             if random<0.01 then
             begin
                  if lastkick<>0 then
                  begin
                       if paddles[lastkick].y<100 then
                          inc(wallboven,2) else
                          inc(wallonder,2);
                          comm.add('WALL ADDED');
                  end;
             end;
             if random<0.01 then
             begin
                    for k:=1 to 15 do
                      veld[random(11),random(10)]:=60+random(16);
                  comm.add('BLOCKS ADDED !!!');
             end;
             if random<0.1 then
             begin
                    veld[random(11),random(10)]:=200;
                  comm.add('FLIP BLOCK !!!');
             end;
             if (random<0.003) and (nrplayer>1) then
             begin
                  s:=paddles[1].y;
                  paddles[1].y:=paddles[2].y;
                  paddles[2].y:=s;
                  comm.add('PADDLES SWITCHED :)');
             end;
             {if random<0.1 then
             begin
                  s:=paddles[lastkick].keyleft;
                  paddles[lastkick].keyleft:=paddles[lastkick].keyright;
                  paddles[lastkick].keyright:=s;
                  comm.add('CONTROLS SWITCHED ISNT LIFE A PAIN');
             end;}
             veld[i,j]:=0;
           end;
       end;


       x:=x+snelheid*cos(hoek);
       y:=y+snelheid*sin(hoek);
       if (y>199) then
       begin
            exists:=false;
            if paddles[1].y>100 then
               inc(paddles[2].points,100)
            else
               inc(paddles[1].points,100)
       end;
       if (y<0) then
       begin
            exists:=false;
            if paddles[1].y<100 then
               inc(paddles[2].points,100)
            else
               inc(paddles[1].points,100)
       end;
     end;
end;

procedure ball.draw;
begin
     if exists then
     begin
     if not fireball then
     begin
       page2^[round(y),round(x)]:=28;
       page2^[round(y-1),round(x)]:=26;
       page2^[round(y),round(x-1)]:=26;
       page2^[round(y),round(x+1)]:=26;
       page2^[round(y+1),round(x)]:=26;
       page2^[round(y-1),round(x+1)]:=24;
       page2^[round(y-1),round(x-1)]:=24;
       page2^[round(y+1),round(x+1)]:=24;
       page2^[round(y+1),round(x-1)]:=24;
       page2^[round(y-2),round(x+1)]:=21;
       page2^[round(y-2),round(x)]:=21;
       page2^[round(y-2),round(x-1)]:=21;

       page2^[round(y+2),round(x+1)]:=21;
       page2^[round(y+2),round(x)]:=21;
       page2^[round(y+2),round(x-1)]:=21;

       page2^[round(y+1),round(x+2)]:=21;
       page2^[round(y-1),round(x+2)]:=21;
       page2^[round(y),round(x+2)]:=21;

       page2^[round(y+1),round(x-2)]:=21;
       page2^[round(y-1),round(x-2)]:=21;
       page2^[round(y),round(x-2)]:=21;
     end
     else
     begin
            page2^[round(y),round(x)]:=140;
            page2^[round(y-1),round(x)]:=142;
            page2^[round(y),round(x-1)]:=142;
            page2^[round(y),round(x+1)]:=142;
            page2^[round(y+1),round(x)]:=142;
            page2^[round(y-1),round(x+1)]:=142;
            page2^[round(y-1),round(x-1)]:=142;
            page2^[round(y+1),round(x+1)]:=142;
            page2^[round(y+1),round(x-1)]:=142;
            page2^[round(y-2),round(x+1)]:=142;
            page2^[round(y-2),round(x)]:=142;
            page2^[round(y-2),round(x-1)]:=142;

            page2^[round(y+2),round(x+1)]:=144;
            page2^[round(y+2),round(x)]:=144;
            page2^[round(y+2),round(x-1)]:=144;

            page2^[round(y+1),round(x+2)]:=144;
            page2^[round(y-1),round(x+2)]:=144;
            page2^[round(y),round(x+2)]:=144;

            page2^[round(y+1),round(x-2)]:=144;
            page2^[round(y-1),round(x-2)]:=144;
            page2^[round(y),round(x-2)]:=144;
     end;
     end;
end;

var
   page3:^vscreen;


procedure initveldcoords;
var i,j:integer;
begin
   for i:=0 to 10 do
    for j:=0 to 9  do begin
     veldco[i,j].xa:=20*i-1;
     if nrplayer>1 then veldco[i,j].ya:=yblocks+(5*j)-1
     else veldco[i,j].ya:=yblocks+(10*j)-1;
     veldco[i,j].xb:=20*(i+1)+1;
     if nrplayer>1 then veldco[i,j].yb:=yblocks+(5*(j+1)+1)
     else veldco[i,j].yb:=yblocks+(10*(j+1)+1);
    end;
end;


procedure initballcount;
var i:integer;
begin
 ballcount:=0;
 for i:=1 to 100 do begin
    if balls[i].exists then inc(ballcount);
 end;
end;

procedure initblockcount;
var i,j:integer;
begin
 blockcount:=0;
 for i:=0 to 10 do begin
   for j:=0 to 9 do begin
     if veld[i,j]>0 then inc(blockcount);
   end;
 end;
end;



procedure init2player;
var
   i,j:integer;
begin
     wallboven:=0;
     decwallboven:=1;
     wallonder:=0;
     decwallonder:=1;
     yblocks:=75;
     lives:=10;
     {eenderwelke waarde >0 is goed is gewoon nodig voor de 1 player versie}
     {bij 2 spelers eindigt het spel als alle blocks op zijn}
     for i:= 0 to 15 do
     begin
          pal[140+i,1]:=63-i*8;
          pal[140+i,2]:=0;
          pal[140+i,3]:=0;
     end;
     setactivepalette(pal,140,155);
     new(page3);
     paddles[1].keyleft:=scCtrl;
     paddles[1].keyright:=scAlt;
     paddles[1].keyshoot:=scspace;
     paddles[2].keyleft:=scleft;
     paddles[2].keyshoot:=scup;
     paddles[2].keyright:=scright;
     paddles[1].color:=56;
     paddles[2].color:=64;
     paddles[1].x:=113;
     paddles[1].nr:=1;
     paddles[2].nr:=2;
     paddles[1].y:=10;
     paddles[1].lengte:=40;
     paddles[2].x:=107;
     paddles[2].y:=190;
     paddles[2].lengte:=40;
     paddles[1].points:=0;
     paddles[1].abletoshoot:=0;
     paddles[2].points:=0;
     paddles[2].abletoshoot:=0;
     randomize;
     for i:= 1 to 100 do
     with balls[i] do
     begin
          x:=50+random(120);
          y:=random(100)+50;
          snelheid:=1.5;
          hoek:=0.5;
          exists:=false;
     end;
     balls[2].exists:=true;
     balls[2].x:=110;
     balls[2].y:=100;
     balls[2].hoek:=pi/2;
     balls[1].exists:=true;
     balls[1].x:=110;
     balls[1].y:=100;
     balls[1].hoek:=3*pi/2;
     for i:=0 to 10 do
     for j:=0 to 9 do
     if i<>5 then
         veld[i,j]:=60+random(16);
     initveldcoords;
     initballcount;
     pal[200,1]:=63;
     pal[200,2]:=63;
     pal[200,3]:=63;
     setactivepalette(pal,200,200);
end;




procedure init1player;
var
   i,j:integer;
begin
     wallboven:=1;
     decwallboven:=0;
     wallonder:=0;
     decwallonder:=1;
     yblocks:=10;
     lives:=5;
     level:=1;
     for i:= 0 to 15 do
     begin
          pal[140+i,1]:=63-i*8;
          pal[140+i,2]:=0;
          pal[140+i,3]:=0;
     end;
     new(page3);
     paddles[1].keyleft:=scleft;
     paddles[1].keyshoot:=scup;
     paddles[1].keyright:=scright;
     paddles[1].color:=56;
     paddles[1].x:=113;
     paddles[1].nr:=1;
     paddles[1].y:=190;
     paddles[1].lengte:=40;
     paddles[1].points:=0;
     paddles[1].abletoshoot:=0;
     paddles[2].points:=-1;
     randomize;
     for i:= 1 to 100 do
     with balls[i] do
     begin
          x:=50+random(120);
          y:=random(10)+140;
          snelheid:=1.5;
          hoek:=0.5;
          exists:=false;
     end;
     balls[1].exists:=true;
     balls[1].x:=110;
     balls[1].y:=140;
     balls[1].hoek:=pi/2;
     balls[1].lastkick:=1;
      for i:=1 to 40 do
                      veld[random(11),random(10)]:=60+random(16);
     initveldcoords;
     initballcount;
     pal[200,1]:=63;
     pal[200,2]:=63;
     pal[200,3]:=63;
     setactivepalette(pal,200,200);
end;



{
PROCEDURE WaitVBL;
 var i:integer;

    label l1,l2;
begin
    Asm
               mov  dx,3dah
            l1:
               in   al,dx
               and  al,08h
               jnz  l1
            l2:
              in   al,dx
              and  al,08h
              jz   l2
          End;
end; {WaitVbl}


procedure initsinus;
var i:integer;
begin
    for i:=0 to 255 do begin
       SINUS[i]:=64+round(8*sin(2*pi*i/255));
    end;
end;

procedure walls;
var
   i:integer;
   p:palettetype;
   col:byte;
begin
     p[201,1]:=32+wallboven*4;
     p[201,2]:=32+wallboven*4;
     p[201,3]:=32+wallboven*4;
     p[202,1]:=32+wallboven*4;
     p[202,2]:=32+wallboven*4;
     p[202,3]:=32+wallboven*4;
     if wallboven=1 then
     begin
        p[201,2]:=0;
        p[201,3]:=0;
     end;
     if wallonder=1 then
     begin
        p[202,2]:=0;
        p[202,3]:=0;
     end;
     setactivepalette(p,201,202);

     if nrplayer=1 then begin
       for i:=0 to 220 do begin
          col:=i+offset;
          page2^[0,220-i]:=sinus[col];
       end;
     end
     else begin
       vgacolor:=201;
       if wallboven>0 then
          linepage2(0,0,220,0);
     end;
     vgacolor:=202;
     if wallonder>0 then
        linepage2(0,199,220,199);
     vgacolor:=15;
     inc(offset);
     offset:=offset mod 15000;
     for i:=0 to 199 do begin
         col:=i+offset;
         page2^[i,0]:=sinus[col];
         page2^[199- i,220]:=sinus[col];
     end;
     vgacolor:=0;
end;

procedure block(x1,y1,x2,y2,c:byte);
begin
     if c=200 then
        c:=random(16)+60;
     vgacolor:=c+24*2;
     boxpage2(x1,y1,x2,y2);
     vgacolor:=c;
     boxpage2(x1+1,y1+1,x2-1,y2-1);
     vgacolor:=c-24;
     linepage2(x1+1,y1,x2-1,y1);
     linepage2(x1,y1+1,x1,y2-1);
     vgacolor:=c+24;
     linepage2(x2,y1+1,x2,y2-1);
     linepage2(x1+1,y2,x2-1,y2);
end;

procedure blocks;
var
   i,j:integer;
begin
     for i:=0 to 10 do
     for j:=0 to 9 do
     if veld[i,j]>0 then
     begin
          block(veldco[i,j].xa+3,veldco[i,j].ya+1,veldco[i,j].xb-2,veldco[i,j].yb-3,veld[i,j]);
     end;
end;

procedure draw;
var
   i:integer;
   j:byte;
   s:string;
   p:palettetype;
begin
     p[200,1]:=random(64);
     p[200,2]:=random(64);
     p[200,3]:=random(64);
     setactivepalette(p,200,200);
     clrpage2scr;
     walls;
     blocks;
     paddles[1].draw;
     if nrplayer>1 then paddles[2].draw;
     for i:= 1 to 100 do
         balls[i].draw;
     for i:= 1 to 500 do
     if vuurwerk[i].exists then
         page2^[vuurwerk[i].y,vuurwerk[i].x]:=vuurwerk[i].color;
     for i:=1 to 2 do
         bullets[i].draw;
     if nrplayer>1 then begin
        str(paddles[1].points,s);
        writeshow(230,paddles[1].y,s,paddles[1].color);
        str(paddles[2].points,s);
        writeshow(230,paddles[2].y,s,paddles[2].color);
     end
     else begin
        str(paddles[1].points,s);
        writeshow(230,paddles[1].y,s,paddles[1].color);
        str(lives,s);
        writeshow(230,paddles[1].y-20,'LIVES '+s,64);
     end;
     comm.draw;
     if ballcount<7 then vsync; {wait for vertical blank same as waitvbl asm code}
     copyfrompage2;
end;

procedure move;
var
   i,j:integer;
begin
     paddles[1].move;
     paddles[2].move;
     bullets[1].move;
     bullets[2].move;
     for i:=1 to 500 do
     vuurwerk[i].move;
     for i:=1 to 100 do
     balls[i].move;
end;

procedure reinit2player;
var
   i:integer;
begin
     for i:=1 to 50 do
     begin
          move;
          draw;
     end;
     balls[2].exists:=true;
     balls[2].fireball:=false;
     balls[2].x:=110;
     balls[2].lastkick:=0;
     balls[1].lastkick:=0;
     balls[2].y:=100;
     balls[2].hoek:=pi/2;
     balls[2].snelheid:=2;
     balls[1].snelheid:=2;
     balls[1].exists:=true;
     balls[1].x:=110;
     balls[1].y:=100;
     balls[1].hoek:=3*pi/2;
     balls[1].fireball:=false;
end;


procedure reinit1player;
var
   i:integer;
   s:string;
begin
     dec(lives);
     for i:=0 to 100 do balls[i].exists:=false;
     for i:=1 to 100 do
     begin
          move;
          draw;
     end;
     balls[2].y:=140;
     balls[2].hoek:=3*pi/2;
     balls[2].snelheid:=2+(level/10);
     if balls[2].snelheid>4 then balls[2].snelheid:=4;
     balls[2].exists:=true;
     balls[2].x:=110;
     balls[2].fireball:=false;
end;






procedure play;
var k:integer;
    s:string;
begin
     draw;
     setactivepalette(black,0,255);
     copyfrompage2;
     fadeinto(black,pal);
     repeat
           move;
           draw;
           initballcount;
           initblockcount;
           if ballcount=0 then begin
             if nrplayer=1 then reinit1player
             else reinit2player;
           end;

           if key[scend] then
           begin
                delay(100);
                repeat
                      draw;
                until key[scend];
                delay(100);
           end;
           if (nrplayer<2) and (blockcount=0) then begin
                  for k:=1 to 40+(level*2) do
                      veld[random(11),random(10)]:=60+random(16);
                  initblockcount;
                  inc(lives);
                  inc(level);
                  str(level,s);
                  comm.add('LEVEL '+s+' !!!');
                  reinit1player;
           end;
     until key[scenter] or (blockcount=0) or (lives=0);
     key[scenter]:=false;
end;






procedure drawgameover;
var
   i:integer;
   j:byte;
   s:string;
   p:palettetype;
begin
     p[200,1]:=random(64);
     p[200,2]:=random(64);
     p[200,3]:=random(64);
     setactivepalette(p,200,200);
     clrpage2scr;
     walls;
     blocks;
     paddles[1].draw;
     if nrplayer>1 then paddles[2].draw;
     for i:= 1 to 100 do
         balls[i].draw;
     for i:= 1 to 500 do
     if vuurwerk[i].exists then
         page2^[vuurwerk[i].y,vuurwerk[i].x]:=vuurwerk[i].color;
     for i:=1 to 2 do
         bullets[i].draw;
     if nrplayer>1 then begin
        str(paddles[1].points,s);
        writeshow(230,paddles[1].y,s,paddles[1].color);
        str(paddles[2].points,s);
        writeshow(230,paddles[2].y,s,paddles[2].color);
     end
     else begin
        str(paddles[1].points,s);
        writeshow(230,paddles[1].y,s,paddles[1].color);
        str(lives,s);
        writeshow(230,paddles[1].y-20,'LIVES '+s,64);
     end;
     if ((offset mod 60)=0) then comm.add('PRESS SPACE !');
     comm.draw;
      for i:=0 to 19 do
               writen(110-length('GAME OVER')*3,1+i*10,'GAME OVER',60+i);
     vsync;{waitvbl}
     copyfrompage2;
end;




procedure gameover;
begin
     delay(100);
     repeat
           drawgameover;
     until key[scenter] or key[scspace];
     fadeinto(pal,black);
end;






procedure titletext;
begin
   writeflashy(155-length('ARKAPONG')*3,10,'ARKAPONG');
   writeflashy(155-length('--------')*3,12,'________');
   writen(155-length('PROGRAMMED BY in i day')*3,40,'PROGRAMMED IN 1 DAY BY',60);
   writeshow(155-length('walle and moby')*3,50,'MOBY and WALLE',68);
   writen(155-length('SAM ALSO HELPED AS GAMEPLAYER AND')*3,60,'SAM ALSO HELPED AS GAMEPLAYER AND',60);
   writen(155-length('SUGGESTED SOME SPECIALS WE COULD Add')*3,70,'SUGGESTED SOME SPECIALS WE COULD ADD',60);
   writen(5,90,'CONTROLS PLAYER 1: LEFT/RIGHT  = MOVE ,UP    = SHOOT',60);
   writen(5,100,'CONTROLS PLAYER 2: CONTROL/ALT = MOVE ,SPACE = SHOOT',60);
   writen(155-length('END = TOGGLE PAUSE, ENTER = QUIT GAME')*3,110,'END = TOGGLE PAUSE, ENTER = QUIT GAME',60);
   writen(20,130,'NORMAL BLOCKS                = 20 POINTS',60);
   writen(20,140,'FLIP BLOCKS                  = 1000 POINTS',60);
   writen(20,150,'HITTING OPPONENT WITH ROCKET = 2000 POINTS',60);
   writeshow(155-length('give number of players (1/2)')*3,170,'GIVE NUMBER OF PLAYERS (1/2)',70);
   writeshow(155-length('or press h to view highscores')*3,180,'OR PRESS H TO VIEW HIGHSCORES',70);
end;



procedure loadscoretable;
var
   i:integer;
   f:file of scoretable;
begin
     for i:=1 to 10 do
     begin
          scores[i].name:='';
          scores[i].points:=0;
     end;
     assign(f,'scores.dat');
     reset(f);
     read(f,scores);
     close(f);
end;


procedure drawscoretable;
var i:integer;
    s: string;
begin
     for i:=1 to 10 do
     begin
          str(scores[i].points,s);
          writeshow(20,10+(i*10),scores[i].name,68);
          writeshow(240,10+(i*10),s,68);
     end;
     writeflashy(155-length('press space to continue !')*3,190,'PRESS SPACE TO CONTINUE !');
end;

procedure viewscoretable;
begin
     fadeinto(pal,black);
     clrpage2scr;
     drawscoretable;
     copyfrompage2;
     fadeinto(black,pal);
     repeat
        clrpage2scr;
        inc(offset);
        offset:=offset mod 15000;
        drawscoretable;
        copyfrompage2;
        vsync;
     until key[scspace];
     fadeinto(pal,black);
end;

procedure titlescreen;
var
    temp : boolean;
begin
 titletext;
 setactivepalette(black,0,255);
 copyfrompage2;
 fadeinto(black,pal);
 nrplayer:=0;
 highscore:=scores[1].points;
 repeat
   if key[sc1] then nrplayer:=1;
   if key[sc2] then nrplayer:=2;
   if key[sch] then
   begin
        viewscoretable;
        clrpage2scr;
        titletext;
        copyfrompage2;
        fadeinto(black,pal);
   end;
   clrpage2scr;
   inc(offset,2);
   offset:=offset mod 15000;
   titletext;
   copyfrompage2;
   vsync;{waitvbl;}
 until nrplayer>0;
 fadeinto(pal,black);
end;



procedure exitscreen;
var
    s   : string;
begin
     clrpage2scr;
     inc(offset);
     offset:=offset mod 15000;
     writen(155-length('IF YOU LIKE THIS GAME CONTACT ONE OF US:')*3,0,'IF YOU LIKE THIS GAME CONTACT ONE OF US:',60);

     writeshow(155-length('--- sam ---')*3,20,'--- SAM ---',68);
     writen(30,30,'REAL NAME : Sam Tulfer',60);
     writen(30,40,'ADDRESS   : ABOVE CAFE DEN BISSER, Antwerp',60);

     writesHow(155-length('--- moby ---')*3,60,'--- MOBY ---',68);
     writen(30,70,'REAL NAME : ANTHONY LIEKENS',60);
     writen(30,80,'ADDRESS   : SOMEWHERE IN SINT-NIKLAAS, BELGIUM',60);
     writen(30,90,'EMAIL     : liekens@alife.santafe.edu',60);

     writeshow(155-length('--- walle ---')*3,110,'--- WALLE ---',68);
     writen(30,120,'REAL NAME : WALTER SCHREPPERS',60);
     writen(30,130,'ADDRESS   : WATERINGSTRAAT 99, 2400 MOL, BELGIUM',60);
     writen(30,140,'EMAIL     : WALLE@MAIL.DMA.BE',60);

     writen(155-length('why was this game made ?')*3,160,'WHY WAS THIS GAME MADE ?',60);
     writen(10,170,'WE WERE BROKE, BORED AND DUMPED BY OUR GIRLFRIENDS',60);
     writeflashy(155-length('do you want to play again ? (y/n)')*3,190,'DO YOU WANT TO PLAY AGAIN ? (Y/N)');
     copyfrompage2;
     vsync;
end;

procedure init;
begin
 govga256;
 installfastkeys;
 FillChar (Black,SizeOf(Black),0); { Make Black all zero, a
                                      black target palette }
 GetActivePalette (Pal,0,255); { Store entire active palette in P }
end;



procedure sortscores;
var
   i       : integer;
   done    : boolean;
   swap    : score;
begin
     repeat
           done:=true;
           for i:=10 downto 2 do
                if scores[i].points>scores[i-1].points then
                begin
                     swap:=scores[i];
                     scores[i]:=scores[i-1];
                     scores[i-1]:=swap;
                     done:=false;
                end;
     until done;
end;

procedure enterhighscore(player:integer);
var
   s,p,name:string;
   c:char;
begin
     restorekeyboard;
     name:='';
     clrpage2scr;
     str(player,p);
     p:='PLAYER '+p;
     s:='CONGRATULATIONS          YOU HAVE MADE THE TOP 10 !';
     writeflashy(155-length(s)*3,10,s);
     writen(145-length(p)*6,10,p,paddles[player].color);
     copyfrompage2;
     fadeinto(black,pal);
     c:=' ';
     repeat
           clrpage2scr;
           inc(offset);
           offset:=offset mod 15000;
           writeflashy(155-length(s)*3,10,s);
           writen(145-length(p)*6,10,p,paddles[player].color);
           writen(20,40,'ENTER YOUR NAME : ',68);
           writen(20,90,'Can''t type anything ? ... press control twice',60);
           if keypressed then
           begin
                c:=readkey;
                if ord(c)=8 then
                begin
                     {deleten van 1 char uit string met delete(name,index,count)}
                     delete(name,length(name),1);
                end
                else if length(name)<30 then name:=name+c;
           end;
           writeflashy(20+length('enter your name : ')*6,40,name);
           {a cursor ;)}
           writeflashy(20+(length('enter your name : ')+length(name))*6,40,'_');

           copyfrompage2;
           vsync;
     until ord(c)=13;
     installfastkeys;
     fadeinto(pal,black);
     clrpage2scr;
     copyfrompage2;
     scores[10].name:=name;
     scores[10].points:=paddles[player].points;
     sortscores;
end;



procedure writescoretable;
var
   i:integer;
   fs:file of scoretable;
begin
     assign(fs,'scores.dat');
     rewrite(fs);
     write(fs,scores);
     close(fs);
end;



procedure exit;
begin
     clrpage2scr;
     clrvgascr;
     setactivepalette(pal,0,255);
     vsync;
     dispose(page3);
     restoremode;
     restorekeyboard;
     writescoretable;
end;




begin
     initsinus;
     init;
     done:=false;
     loadscoretable;
     repeat
        titlescreen;
        if nrplayer=1 then
            init1player
        else
            init2player;
        play;
        gameover; {gameover op scherm tonen en uitfaden}

        if paddles[1].points>=scores[10].points then
           enterhighscore(1);
        if (nrplayer>1) and (paddles[2].points>=scores[10].points) then
           enterhighscore(2);

        viewscoretable;

        exitscreen;
        fadeinto(black,pal);
        repeat
              exitscreen;
              if key[scn] then done:=true;
        until key[scn] or key[scy];
        fadeinto(pal,black);
        clrpage2scr;
        clrvgascr;
     until done;
     exit; {grafische mode afzetten enz}
end.

